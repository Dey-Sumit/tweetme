{"version":3,"sources":["lookups/lookup-component.js","tweets/CreateTweet.js","lookups/lookup.js","tweets/list.js","tweets/buttons.js","tweets/DetailTweet.js","tweets/components.js","index.js"],"names":["lookUp","method","endpoint","callback","data","console","log","xhttp","XMLHttpRequest","url","responseType","JsonData","csrftoken","name","cookieValue","document","cookie","cookies","split","i","length","trim","substring","decodeURIComponent","getCookie","open","setRequestHeader","onload","response","status","onerror","e","JSON","stringify","send","TweetCreate","props","tweet_text_ref","React","createRef","didTweet","handleBackendUpdate","className","action","onSubmit","event","preventDefault","new_val","current","value","required","ref","placeholder","type","TweetList","newTweets","useState","tweetsInit","setTweetsInit","tweets","setTweets","tweetDidSet","setTweetDidSet","useEffect","finalTweets","concat","username","apiTweetList","handleDidRetweet","newTweet","updatedTweetsInit","unshift","updatedFinalTweets","map","tweet","index","key","didRetweet","ActionBtn","didPerformAction","likes","actionDisplay","display","handleBackendAction","onClick","tweetId","actionType","id","ParentTweet","parent","hideActions","Tweet","path","window","location","pathname","idRegex","match","urlTweetId","groups","isDetail","actionTweet","setActionTweet","handlePerformAction","newActionTweet","content","Fragment","href","TweetDetailComponent","tweetid","didLookUp","setDidLookUp","setTweet","handleBackendLoopUp","alert","element","getElementById","createElement","dataset","myComponent","setNewTweets","canTweet","tempNewTweet","ReactDOM","render","querySelectorAll","forEach","container"],"mappings":"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","file":"static/js/main.9bfbebc3.chunk.js","sourcesContent":["function getCookie(name) {\r\n    var cookieValue = null;\r\n    if (document.cookie && document.cookie !== '') {\r\n        var cookies = document.cookie.split(';');\r\n        for (var i = 0; i < cookies.length; i++) {\r\n            var cookie = cookies[i].trim();\r\n            // Does this cookie string begin with the name we want?\r\n            if (cookie.substring(0, name.length + 1) === (name + '=')) {\r\n                cookieValue = decodeURIComponent(cookie.substring(name.length + 1));\r\n                break;\r\n            }\r\n        }\r\n    }\r\n    return cookieValue;\r\n}\r\n\r\nexport const lookUp = (method, endpoint, callback, data) => {\r\n    console.log(\"look up called\");\r\n\r\n    const xhttp = new XMLHttpRequest()\r\n    const url = `http://localhost:8000/api${endpoint}`\r\n    xhttp.responseType = \"json\"\r\n    const csrftoken = getCookie('csrftoken');\r\n    xhttp.open(method, url)\r\n    xhttp.setRequestHeader(\"Content-Type\", \"application/json\")\r\n\r\n    if (csrftoken) {\r\n        // xhttp.setRequestHeader(\"HTTP_X_REQUESTED_WITH\", \"XMLHttpRequest\")\r\n        // xhttp.setRequestHeader(\"X-Requested-With\", \"XMLHttpRequest\")\r\n        xhttp.setRequestHeader(\"X-CSRFToken\", csrftoken)\r\n    }\r\n    if (method === \"POST\") {\r\n        xhttp.setRequestHeader(\"X-Requested-With\", \"XMLHttpRequest\")\r\n    }\r\n    xhttp.onload = function () {\r\n        callback(xhttp.response, xhttp.status)\r\n    }\r\n    xhttp.onerror = (e) => {\r\n        console.log(e);\r\n        callback({\r\n            'msg': 'error on request'\r\n        }, 400)\r\n    }\r\n    let JsonData;\r\n    if (data) {\r\n        JsonData = JSON.stringify(data)\r\n        //  console.log('JsonData', JsonData);\r\n    }\r\n    xhttp.send(JsonData)\r\n}\r\n","import React from 'react'\r\nimport { apiTweetCreate } from '../lookups'\r\n\r\n//create a tweet using tweetCreateAPi call , add it to the list in the server and call again tweetsLoad api,o every time a new tweet comes,call tweetLoad again..\r\n// but we are not following this approach \r\n// app is calling tweetsLoad api only once stored it's response in an array(tweetsInit[])(when first login)\r\n// when new tweet is created ,it is stored in an different array[newTweets[]] and pass it to tweetsList component\r\n// the tweetlist component concat tweetInit[] and newTweets[] ,and create a final array (tweets[]) render it with tweets.map()\r\n// so less api call :)\r\n\r\nexport const TweetCreate = (props) => {\r\n    const tweet_text_ref = React.createRef()\r\n    const { didTweet } = props\r\n\r\n    const handleBackendUpdate = (response, status) => {\r\n        //backend api handler\r\n        if (status === 201)\r\n            didTweet(response)\r\n        else\r\n            console.log(status, response);\r\n    }\r\n\r\n    const handleSubmit = (event) => {\r\n        event.preventDefault()\r\n        const new_val = tweet_text_ref.current.value\r\n        apiTweetCreate(new_val, handleBackendUpdate)\r\n        tweet_text_ref.current.value = ''\r\n    }\r\n\r\n    return (\r\n        <div className=\"col-8 my-4\">\r\n            <form action=\"\" onSubmit={handleSubmit}>\r\n                <textarea required ref={tweet_text_ref} className=\"form-control\" placeholder='tweet it...'></textarea>\r\n                <button type='submit' className='btn btn-secondary mt-2'>tweet</button>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n","import { lookUp } from './lookup-component'\r\n\r\nexport const apiTweetCreate = (data, callback) => {\r\n    lookUp('POST', '/create/', callback, { 'content': data })\r\n}\r\nexport const apiTweetDetail = (tweetId, callback) => {\r\n    lookUp('GET', `/${tweetId}`, callback)\r\n}\r\nexport const apiTweetList = (username, callback) => {\r\n    let endpoint = '/'\r\n    if (username)\r\n        endpoint = `/?username=${username}`\r\n    lookUp('GET', endpoint, callback)\r\n}\r\n\r\nexport const apiTweetAction = (tweetId, actionType, callback) => {\r\n    const data = { id: tweetId, action: actionType }\r\n    lookUp('POST', '/action', callback, data)\r\n}","import React, { useState, useEffect } from 'react'\r\nimport { apiTweetList } from '../lookups'\r\nimport { Tweet } from '.'\r\n\r\nexport const TweetList = (props) => {\r\n    let { newTweets } = props\r\n    const [tweetsInit, setTweetsInit] = useState([])//initial tweet \r\n    const [tweets, setTweets] = useState([])\r\n    const [tweetDidSet, setTweetDidSet] = useState(false)\r\n\r\n    //componentDidUpdate\r\n    useEffect(() => {\r\n        let finalTweets = [...newTweets].concat(tweetsInit)\r\n        //when we have new tweet -->\r\n        //first time tweets.length ==0 (!= final.length),so it updated the tweets which renders tweets.map()\r\n        if (finalTweets.length !== tweets.length) {\r\n            setTweets(finalTweets)\r\n            console.log(\"final tweets Updated\");\r\n        }\r\n    }, [newTweets, tweetsInit, tweets])\r\n\r\n    // renders when component mounts,(triggesrs only when loadTweets changes)\r\n    useEffect(() => {\r\n        if (tweetDidSet === false) {\r\n            console.log(\"tweetsLoadApi called\");\r\n            const handleBackendTweetList = (response, status) => {\r\n                if (status === 200) {\r\n                    setTweetsInit(response)\r\n                    setTweetDidSet(true)\r\n                }\r\n                else\r\n                    console.log(\"There is an error;probably the django server is not running\");\r\n            }\r\n            apiTweetList(props.username, handleBackendTweetList)\r\n        }\r\n    }, [tweetsInit, tweetDidSet, setTweetDidSet, props.username])\r\n\r\n    const handleDidRetweet = (newTweet) => {\r\n        // :(\r\n        const updatedTweetsInit = [...tweetsInit]\r\n        updatedTweetsInit.unshift(newTweet)\r\n        setTweetsInit(updatedTweetsInit)\r\n\r\n        const updatedFinalTweets = [...tweets]\r\n        updatedFinalTweets.unshift(newTweet)\r\n        setTweetsInit(updatedFinalTweets)\r\n    }\r\n\r\n    return <div>{\r\n        tweets.map((tweet, index) =>\r\n            <Tweet key={index}\r\n                didRetweet={handleDidRetweet} tweet={tweet} />\r\n        )\r\n    }</div>\r\n}\r\n","import React from 'react'\r\n\r\nimport { apiTweetAction } from '../lookups'\r\n\r\n\r\nexport const ActionBtn = ({ tweet, action, didPerformAction }) => {\r\n    const likes = tweet.likes ? tweet.likes : 0;\r\n    //const [userDidLike, setUserDidLike] = useState(false)\r\n    //const [likes, setLikes] = useState(tweet.likes ? tweet.likes : 0)\r\n\r\n    let className = 'btn btn-primary mt-2 mx-2'\r\n    if (action.type === 'retweet')\r\n        className = `btn mt-2 mx-2 btn-outline-info`\r\n    const actionDisplay = action.display ? action.display : \"action\"\r\n    const handleBackendAction = (response, status) => {\r\n        console.log(response, status)\r\n        if ((status === 200 || status === 201) && didPerformAction) {\r\n            //setLikes(response.likes)\r\n            didPerformAction(response, status)\r\n        }\r\n    }\r\n    const handleClick = (event) => {\r\n        event.preventDefault()\r\n        apiTweetAction(tweet.id, action.type, handleBackendAction)\r\n    }\r\n    const display = action.type === 'like' ? `${likes} ${actionDisplay}` : actionDisplay\r\n    return <button className={className} onClick={handleClick}>{display}</button>\r\n}\r\n","import React, { useState } from 'react'\r\nimport { ActionBtn } from '.'\r\nconst ParentTweet = ({ tweet }) => {\r\n    return tweet.parent ?\r\n        <div className='bg-warning'><p className='px-2'>retweet</p>\r\n            <Tweet hideActions={true} tweet={tweet.parent} />\r\n        </div> : null\r\n}\r\n\r\nexport const Tweet = ({ tweet, didRetweet, hideActions }) => {\r\n    const path = window.location.pathname\r\n    const idRegex = /(?<tweetId>\\d+)/\r\n    const match = path.match(idRegex)\r\n    const urlTweetId = match ? match.groups.tweetId : -1\r\n    const isDetail = `${tweet.id}` === `${urlTweetId}`\r\n\r\n    const [actionTweet, setActionTweet] = useState(tweet ? tweet : null)\r\n\r\n    // when triggesrs it gets the response(new tweet data) from server , it changes the state of the action tweet to the response  \r\n    const handlePerformAction = (newActionTweet, status) => {\r\n        if (status === 200)\r\n            setActionTweet(newActionTweet)\r\n        else if (status === 201) {\r\n            if (didRetweet) {\r\n                didRetweet(newActionTweet)\r\n                console.log(\"retweeted\")\r\n            }\r\n        }\r\n    }\r\n\r\n    const handleLink = (event) => {\r\n        event.preventDefault()\r\n        window.location.href = `/${tweet.id}`\r\n    }\r\n\r\n    return (\r\n        <div className=\"card mx-4 my-2\">\r\n            <div className=\"card-body\">\r\n                <div>\r\n                    <p className='py-2 my-2 text text-dark bg-white border text-center'>\r\n                        {tweet.id}- {tweet.content}\r\n                    </p>\r\n                    <ParentTweet tweet={tweet} />\r\n                </div>\r\n                {(actionTweet && hideActions !== true) && <React.Fragment >\r\n                    <ActionBtn tweet={actionTweet} didPerformAction={handlePerformAction} action={{ 'type': 'like', 'display': 'Likes' }} />\r\n                    <ActionBtn tweet={actionTweet} didPerformAction={handlePerformAction} action={{ 'type': 'unlike', 'display': 'Unlike' }} />\r\n                    <ActionBtn tweet={actionTweet} didPerformAction={handlePerformAction} action={{ 'type': 'retweet', 'display': 'Retweet' }} />\r\n                </React.Fragment>}\r\n                {isDetail === true ? null : <button className='btn btn-secondary' onClick={handleLink}> View</button>}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React, { useState, useEffect } from 'react'\r\nimport { TweetList, TweetCreate } from '.'\r\nimport { apiTweetDetail } from '../lookups'\r\nimport { Tweet } from './DetailTweet'\r\n\r\nexport const TweetComponent = (props) => {\r\n    const [newTweets, setNewTweets] = useState([])\r\n    const canTweet = props.canTweet === \"false\" ? false : true\r\n    const handleNewTweet = (newTweet) => {\r\n        let tempNewTweet = [...newTweets]\r\n        tempNewTweet.unshift(newTweet)\r\n        setNewTweets(tempNewTweet)\r\n    }\r\n    return (<div className=\"\">\r\n        {canTweet === true && <TweetCreate didTweet={handleNewTweet} className='mx-2 my-4' />}\r\n        <TweetList newTweets={newTweets} {...props} />\r\n    </div>)\r\n}\r\n\r\n\r\nexport const TweetDetailComponent = (props) => {\r\n    const { tweetid } = props\r\n    console.log(tweetid);\r\n\r\n    const [didLookUp, setDidLookUp] = useState(false)\r\n    const [tweet, setTweet] = useState(null)\r\n\r\n    const handleBackendLoopUp = (response, status) => {\r\n        if (status === 200) {\r\n            setTweet(response)\r\n            console.log(\"tweet set\");\r\n\r\n        } else\r\n            alert(\"There was an error finding your tweet\")\r\n\r\n    }\r\n    useEffect(() => {\r\n        console.log(\"use effect called\");\r\n        if (didLookUp === false) {\r\n            apiTweetDetail(tweetid, handleBackendLoopUp)\r\n            setDidLookUp(true)\r\n        }\r\n    }, [tweetid, didLookUp, setDidLookUp])\r\n\r\n    return tweet === null ? null : <Tweet tweet={tweet} />\r\n\r\n}\r\n\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\n//import App from './App';\n// import * as serviceWorker from './serviceWorker';\n\nimport { TweetComponent } from './tweets/components'\nimport { TweetDetailComponent } from './tweets'\nconst element = document.getElementById(\"tweetme-2\")\nconst e = React.createElement\nif (element) {\n  console.log(element.dataset);\n  const myComponent = e(TweetComponent, element.dataset)\n\n  //ReactDOM.render(<TweetCreationForm />, element)\n  ReactDOM.render(myComponent, element)\n}\n\nconst tweetDetailElements = document.querySelectorAll(\".tweetme-detail\")\ntweetDetailElements.forEach(container => {\n  ReactDOM.render(\n    e(TweetDetailComponent, container.dataset),\n    container)\n});\n\n\n\n\n\n\n\n\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n"],"sourceRoot":""}