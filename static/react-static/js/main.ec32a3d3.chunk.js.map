{"version":3,"sources":["lookups/lookup-component.js","lookups/lookup.js","tweets/CreateTweet.js","tweets/Feed.js","tweets/buttons.js","profiles/components.js","profiles/ProfileBadgeComponent.js","profiles/lookups.js","tweets/DetailTweet.js","tweets/components.js","index.js"],"names":["lookUp","method","endpoint","callback","data","xhttp","XMLHttpRequest","url","responseType","open","setRequestHeader","JsonData","csrftoken","name","cookieValue","document","cookie","cookies","split","i","length","trim","substring","decodeURIComponent","getCookie","onload","status","response","detail","window","location","href","indexOf","onerror","e","console","log","JSON","stringify","send","apiTweetFeed","nextUrl","undefined","replace","TweetCreate","props","tweet_text_ref","React","createRef","didTweet","handleBackendUpdate","className","action","onSubmit","event","preventDefault","new_val","current","value","required","ref","placeholder","type","TweetFeed","newTweets","useState","tweetsInit","setTweetsInit","tweets","setTweets","tweetDidSet","setTweetDidSet","setNextUrl","useEffect","finalTweets","concat","results","next","username","handleDidRetweet","newTweet","updatedTweetsInit","unshift","updatedFinalTweets","Fragment","map","tweet","index","key","didRetweet","onClick","nextTweets","ActionBtn","didPerformAction","likes","actionDisplay","display","handleBackendAction","tweetId","actionType","id","UserPicture","user","style","UserLink","pathname","children","UserDisplay","includeFullName","hidelink","fullName","first_name","last_name","ProfileBadge","profile","didFollowToggle","profileLoading","actionVerb","is_following","bio","following_count","follower_count","no_of_tweets","ProfileBadgeComponent","didLookUp","setDidLookUp","setProfile","setProfileLoading","handleProfileLookUp","apiProfileDetail","apiProfileFollowToggle","toLowerCase","ParentTweet","retweeter","parent","hideActions","Tweet","path","idRegex","match","urlTweetId","groups","isDetail","actionTweet","setActionTweet","handlePerformAction","newActionTweet","content","TweetComponent","setNewTweets","canTweet","tempNewTweet","TweetDetailComponent","tweetid","setTweet","handleBackendLoopUp","alert","element","getElementById","createElement","myComponent","dataset","ReactDOM","render","elementFeed","querySelectorAll","forEach","container"],"mappings":"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","file":"static/js/main.ec32a3d3.chunk.js","sourcesContent":["function getCookie(name) {\r\n    var cookieValue = null;\r\n    if (document.cookie && document.cookie !== '') {\r\n        var cookies = document.cookie.split(';');\r\n        for (var i = 0; i < cookies.length; i++) {\r\n            var cookie = cookies[i].trim();\r\n            // Does this cookie string begin with the name we want?\r\n            if (cookie.substring(0, name.length + 1) === (name + '=')) {\r\n                cookieValue = decodeURIComponent(cookie.substring(name.length + 1));\r\n                break;\r\n            }\r\n        }\r\n    }\r\n    return cookieValue;\r\n}\r\n\r\nexport const lookUp = (method, endpoint, callback, data) => {\r\n    const xhttp = new XMLHttpRequest()\r\n    const url = `http://localhost:8000/api${endpoint}`\r\n    // console.log(url);\r\n\r\n    xhttp.responseType = \"json\"\r\n    xhttp.open(method, url)\r\n    xhttp.setRequestHeader(\"Content-Type\", \"application/json\")\r\n\r\n    const csrftoken = getCookie('csrftoken');\r\n    if (csrftoken) {\r\n        xhttp.setRequestHeader(\"X-CSRFToken\", csrftoken)\r\n    }\r\n    if (method === \"POST\") {\r\n        xhttp.setRequestHeader(\"X-Requested-With\", \"XMLHttpRequest\")\r\n    }\r\n    xhttp.onload = function () {\r\n        // if not logged in,redirect to login page\r\n        if (xhttp.status === 403 && xhttp.response) {\r\n            const detail = xhttp.response.detail\r\n            if (detail === \"Authentication credentials were not provided.\") {\r\n                if (window.location.href.indexOf(\"login\") === -1) {\r\n                    window.location.href = \"account/login?showLoginRequired=true\"\r\n                }\r\n            }\r\n        }\r\n        callback(xhttp.response, xhttp.status)\r\n    }\r\n    xhttp.onerror = (e) => {\r\n        console.log(\"error\", e)\r\n        callback({\r\n            'msg': 'error on request'\r\n        }, 400)\r\n    }\r\n    let JsonData;\r\n    if (data) {\r\n        JsonData = JSON.stringify(data)\r\n    }\r\n    xhttp.send(JsonData)\r\n}\r\n","import { lookUp } from './lookup-component'\r\n\r\nexport const apiTweetCreate = (data, callback) => {\r\n    lookUp('POST', '/create/', callback, { 'content': data })\r\n}\r\nexport const apiTweetDetail = (tweetId, callback) => {\r\n    lookUp('GET', `/${tweetId}`, callback)\r\n}\r\nexport const apiTweetList = (username, callback, nextUrl) => {\r\n    let endpoint = '/'\r\n    if (username)\r\n        endpoint = `/?username=${username}`\r\n    // change the endpoint if next url is passed\r\n    console.log(nextUrl);\r\n\r\n    if (nextUrl !== null && nextUrl !== undefined) {\r\n        endpoint = nextUrl.replace(\"http://localhost:8000/api\", \"\")\r\n    }\r\n    //\"http://localhost:8000/api/?page=4\",\r\n\r\n    lookUp('GET', endpoint, callback)\r\n}\r\n\r\n\r\nexport const apiTweetFeed = (callback, nextUrl) => {\r\n    let endpoint = '/feed/'\r\n    if (nextUrl !== null && nextUrl !== undefined) {\r\n        endpoint = nextUrl.replace(\"http://localhost:8000/api\", \"\")\r\n    }\r\n    lookUp('GET', endpoint, callback)\r\n}\r\nexport const apiTweetAction = (tweetId, actionType, callback) => {\r\n    const data = { id: tweetId, action: actionType }\r\n    lookUp('POST', '/action', callback, data)\r\n}","import React from 'react'\r\nimport { apiTweetCreate } from '../lookups'\r\n\r\n//create a tweet using tweetCreateAPi call , add it to the list in the server and call again tweetsLoad api,o every time a new tweet comes,call tweetLoad again..\r\n// but we are not following this approach \r\n// app is calling tweetsLoad api only once stored it's response in an array(tweetsInit[])(when first login)\r\n// when new tweet is created ,it is stored in an different array[newTweets[]] and pass it to tweetsList component\r\n// the tweetlist component concat tweetInit[] and newTweets[] ,and create a final array (tweets[]) render it with tweets.map()\r\n// so less api call :)\r\n\r\nexport const TweetCreate = (props) => {\r\n    const tweet_text_ref = React.createRef()\r\n    const { didTweet } = props\r\n\r\n    const handleBackendUpdate = (response, status) => {\r\n        //backend api handler\r\n        if (status === 201)\r\n            didTweet(response)\r\n        else\r\n            console.log(status, response);\r\n    }\r\n\r\n    const handleSubmit = (event) => {\r\n        event.preventDefault()\r\n        const new_val = tweet_text_ref.current.value\r\n        apiTweetCreate(new_val, handleBackendUpdate)\r\n        tweet_text_ref.current.value = ''\r\n    }\r\n\r\n    return (\r\n        <div className=\"col-8 my-4\">\r\n            <form action=\"\" onSubmit={handleSubmit}>\r\n                <textarea required ref={tweet_text_ref} className=\"form-control\" placeholder='tweet it...'></textarea>\r\n                <button type='submit' className='btn btn-secondary mt-2'>tweet</button>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n","import React, { useState, useEffect } from 'react'\r\nimport { apiTweetFeed } from '../lookups'\r\nimport { Tweet } from '.'\r\n\r\nexport const TweetFeed = (props) => {\r\n    let { newTweets } = props\r\n    const [tweetsInit, setTweetsInit] = useState([])//initial tweet \r\n    const [tweets, setTweets] = useState([])\r\n    const [tweetDidSet, setTweetDidSet] = useState(false)\r\n    const [nextUrl, setNextUrl] = useState(null)\r\n\r\n    //componentDidUpdate\r\n    useEffect(() => {\r\n        let finalTweets = [...newTweets].concat(tweetsInit)\r\n        //when we have new tweet -->\r\n        //first time tweets.length ==0 (!= final.length),so it updated the tweets which renders tweets.map()\r\n        if (finalTweets.length !== tweets.length)\r\n            setTweets(finalTweets)\r\n    }, [newTweets, tweetsInit, tweets])\r\n\r\n    // renders when component mounts,(triggesrs only when loadTweets changes)\r\n    useEffect(() => {\r\n        if (tweetDidSet === false) {\r\n            console.log(\"tweetsFeedApi called\");\r\n            const handleBackendTweetList = (response, status) => {\r\n                if (status === 200) {\r\n                    setTweetsInit(response.results)\r\n                    setNextUrl(response.next)\r\n                    setTweetDidSet(true)\r\n                }\r\n                else\r\n                    console.log(\"There is an error;probably the django server is not running\");\r\n            }\r\n            apiTweetFeed(handleBackendTweetList)\r\n        }\r\n    }, [tweetsInit, tweetDidSet, setTweetDidSet, props.username])\r\n\r\n    const handleDidRetweet = (newTweet) => {\r\n        // :(\r\n        const updatedTweetsInit = [...tweetsInit]\r\n        updatedTweetsInit.unshift(newTweet)\r\n        setTweetsInit(updatedTweetsInit)\r\n\r\n        const updatedFinalTweets = [...tweets]\r\n        updatedFinalTweets.unshift(newTweet)\r\n        setTweetsInit(updatedFinalTweets)\r\n    }\r\n\r\n    const handleLoadNext = (event) => {\r\n        event.preventDefault()\r\n        if (nextUrl != null) {\r\n            const handleLoadNextResponse = (response, status) => {\r\n                if (status === 200) {\r\n                    var nextTweets = response.results\r\n                    var finalTweets = [...tweets].concat(nextTweets)\r\n                    setTweets(finalTweets)\r\n                    setTweetsInit(finalTweets)\r\n                    setNextUrl(response.next)\r\n                }\r\n                else\r\n                    console.log(\"There is an error;probably the django server is not running\");\r\n\r\n            }\r\n            apiTweetFeed(handleLoadNextResponse, nextUrl)\r\n        }\r\n    }\r\n\r\n    return <React.Fragment> {<div>{\r\n        tweets.map((tweet, index) =>\r\n            <Tweet key={index}\r\n                didRetweet={handleDidRetweet} tweet={tweet} />\r\n        )\r\n    }</div>}\r\n        {nextUrl != null && <button className='btn btn-primary' onClick={handleLoadNext}>Load More</button>}\r\n    </React.Fragment>\r\n}\r\n","import React from 'react'\r\n\r\nimport { apiTweetAction } from '../lookups'\r\n\r\n\r\nexport const ActionBtn = ({ tweet, action, didPerformAction }) => {\r\n    const likes = tweet.likes ? tweet.likes : 0;\r\n    //const [userDidLike, setUserDidLike] = useState(false)\r\n    //const [likes, setLikes] = useState(tweet.likes ? tweet.likes : 0)\r\n\r\n    let className = 'btn btn-primary mt-2 mx-2'\r\n    if (action.type === 'retweet')\r\n        className = `btn mt-2 mx-2 btn-outline-info`\r\n    const actionDisplay = action.display ? action.display : \"action\"\r\n    const handleBackendAction = (response, status) => {\r\n        console.log(response, status)\r\n        if ((status === 200 || status === 201) && didPerformAction) {\r\n            //setLikes(response.likes)\r\n            didPerformAction(response, status)\r\n        }\r\n    }\r\n    const handleClick = (event) => {\r\n        event.preventDefault()\r\n        apiTweetAction(tweet.id, action.type, handleBackendAction)\r\n    }\r\n    const display = action.type === 'like' ? `${likes} ${actionDisplay}` : actionDisplay\r\n    return <button className={className} onClick={handleClick}>{display}</button>\r\n}\r\n","\r\nimport React from 'react'\r\n\r\n\r\nexport const UserPicture = ({ user }) => {\r\n    return <UserLink user={user}>\r\n        <span className=\"px-4 py-2 rounded-circle border text-center bg-secondary\" style={{ 'fontSize': '40px' }}>\r\n            {user.username[0]}\r\n        </span>\r\n    </UserLink>\r\n}\r\n\r\nexport const UserLink = (props) => {\r\n    const { user } = props\r\n    const handleUserLink = (event) => {\r\n        window.location.pathname = `/profile/${user.username}`\r\n    }\r\n    return <span className='pointer' onClick={handleUserLink}>{props.children}</span>\r\n}\r\n\r\nexport const UserDisplay = ({ user, includeFullName, hidelink }) => {\r\n    const fullName = includeFullName === true ? `${user.first_name} ${user.last_name}` : null\r\n    return <React.Fragment>\r\n        {fullName}{\" \"}\r\n        {hidelink === true ? `@${user.username}` : <UserLink user={user}>@{user.username}</UserLink>}\r\n    </React.Fragment>\r\n}\r\n","import React, { useState, useEffect } from 'react'\r\n\r\nimport { apiProfileDetail, apiProfileFollowToggle } from '.'\r\nimport { UserDisplay, UserPicture } from '.'\r\n\r\n//if the profile loading we dont wanna toggle it\r\n\r\nconst ProfileBadge = (props) => {\r\n    const { profile, didFollowToggle, profileLoading } = props\r\n    const actionVerb = (profile && profile.is_following) ? \"unfollow\" : \"follow\"\r\n    const handleFollowToggle = (event) => {\r\n        event.preventDefault()\r\n        // if profile updates it's last state/action(may be for networking error,user clicks multople time) then only fire new action\r\n        if (profileLoading === false)\r\n            didFollowToggle(actionVerb)\r\n    }\r\n    return (\r\n        <section className='aboutSection mt-5'>\r\n            <div className=\"container\">\r\n                <div className=\"row align-item-center\">\r\n                    <div className=\"col-lg-9 mx-auto text-center flex\">\r\n                        <h3>Profile</h3>\r\n                        {/* <img src=\"\" class=\"rounded mx-auto d-block\" alt=\"...\"> */}\r\n                        <p><UserDisplay user={profile} hidelink includeFullName /></p>\r\n                        <p>{profile.bio}</p>\r\n                        <p>{profile.location}</p>\r\n                        <button className='btn'>Edit Profile</button>\r\n                    </div>\r\n                </div>\r\n                <div className=\"counter bg-secondary \">\r\n                    <div className=\"row col-md-9 py-4 mx-auto\">\r\n                        <div className=\"col-md-4 col-6 border\">\r\n                            <div className=\"text-center\">\r\n                                <h6> {profile.following_count} </h6>\r\n                                <p>following</p>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"col-lg-4 col-6 border\">\r\n                            <div className=\"text-center\">\r\n                                <h6> {profile.follower_count} </h6>\r\n                                <button className='btn btn-primary' onClick={handleFollowToggle}>{actionVerb}</button>\r\n                                <p>followers</p>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"col-lg-4 col-6 border\">\r\n                            <div className=\"text-center \">\r\n                                <h6> {profile.no_of_tweets} </h6>\r\n                                <p>tweets</p>\r\n                            </div>\r\n                        </div>\r\n\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </section>\r\n    )\r\n}\r\n\r\nexport const ProfileBadgeComponent = (props) => {\r\n    const { username } = props\r\n    const [didLookUp, setDidLookUp] = useState(false)\r\n    const [profile, setProfile] = useState(null)\r\n    const [profileLoading, setProfileLoading] = useState(false)\r\n    const handleProfileLookUp = (response, status) => {\r\n        console.log(status, response);\r\n        if (status === 200) {\r\n            setProfile(response)\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (didLookUp === false) {\r\n            apiProfileDetail(username, handleProfileLookUp)\r\n            setDidLookUp(true)\r\n        }\r\n    }, [username, didLookUp, setDidLookUp])\r\n\r\n    const handleNewFollow = (actionVerb) => {\r\n        console.log(actionVerb);\r\n        // profile laoding =true; untill the asynchronous function ends\r\n        apiProfileFollowToggle(username, actionVerb, (response, status) => {\r\n            if (status === 200) {\r\n                setProfile(response)\r\n                console.log(response);\r\n\r\n            }\r\n            // async call ends , then make profileloading false\r\n            setProfileLoading(false)\r\n        })\r\n        setProfileLoading(true)\r\n    }\r\n\r\n    return profile ? <ProfileBadge profile={profile} didFollowToggle={handleNewFollow} profileLoading={profileLoading} /> : <h2>loading...</h2>\r\n}\r\n","import { lookUp } from '../lookups'\r\n\r\nexport const apiProfileDetail = (username, callback) => {\r\n    lookUp('GET', `/profiles/${username}`, callback)\r\n}\r\nexport const apiProfileFollowToggle = (username, action, callback) => {\r\n    const data = { \"action\": `${action && action}`.toLowerCase() }\r\n    lookUp('POST', `/profiles/${username}/follow`, callback, data)\r\n}","import React, { useState } from 'react'\r\n\r\nimport { ActionBtn } from '.'\r\nimport { UserDisplay, UserPicture } from '../profiles'\r\n\r\nconst ParentTweet = ({ tweet, retweeter }) => {\r\n    return tweet.parent ?\r\n        <div className='bg-secondary'><p className='px-2'>retweet via <UserDisplay user={retweeter} /></p>\r\n            <Tweet hideActions={true} tweet={tweet.parent} />\r\n        </div> : null\r\n}\r\n\r\nexport const Tweet = ({ tweet, didRetweet, hideActions }) => {\r\n    const path = window.location.pathname\r\n    const idRegex = /(?<tweetId>\\d+)/\r\n    const match = path.match(idRegex)\r\n    const urlTweetId = match ? match.groups.tweetId : -1\r\n    const isDetail = `${tweet.id}` === `${urlTweetId}`\r\n    const [actionTweet, setActionTweet] = useState(tweet ? tweet : null)\r\n\r\n    // when triggesrs it gets the response(new tweet data) from server , it changes the state of the action tweet to the response  \r\n    const handlePerformAction = (newActionTweet, status) => {\r\n        if (status === 200)\r\n            setActionTweet(newActionTweet)\r\n        else if (status === 201) {\r\n            if (didRetweet) {\r\n                didRetweet(newActionTweet)\r\n                console.log(\"retweeted\")\r\n            }\r\n        }\r\n    }\r\n\r\n    const handleLink = (event) => {\r\n        event.preventDefault()\r\n        window.location.href = `/${tweet.id}`\r\n    }\r\n\r\n    return (\r\n        <div className=\"card mx-4 my-2\">\r\n            <div className=\"card-body d-flex\">\r\n                <div className=\"col-1\">\r\n                    <UserPicture user={tweet.user} />\r\n                </div>\r\n                <div className=\"col-11\">\r\n                    <div>\r\n                        <p className='pl-2 mx-2 text text-dark bg-white'>\r\n                            <UserDisplay user={tweet.user} includeFullName />\r\n                        </p>\r\n                        <p className='py-2 my-2 text text-dark bg-white border text-center'>\r\n                            {tweet.content}\r\n                        </p>\r\n                        <ParentTweet tweet={tweet} retweeter={tweet.user} />\r\n                    </div>\r\n                    {(actionTweet && hideActions !== true) &&\r\n                        <React.Fragment >\r\n                            <ActionBtn tweet={actionTweet} didPerformAction={handlePerformAction} action={{ 'type': 'like', 'display': 'Likes' }} />\r\n                            <ActionBtn tweet={actionTweet} didPerformAction={handlePerformAction} action={{ 'type': 'unlike', 'display': 'Unlike' }} />\r\n                            <ActionBtn tweet={actionTweet} didPerformAction={handlePerformAction} action={{ 'type': 'retweet', 'display': 'Retweet' }} />\r\n                        </React.Fragment>}\r\n                    {isDetail === true ? null : <button className='btn btn-secondary' onClick={handleLink}> View</button>}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React, { useState, useEffect } from 'react'\r\nimport { TweetCreate, TweetFeed } from '.'\r\nimport { apiTweetDetail } from '../lookups'\r\nimport { Tweet } from './DetailTweet'\r\n\r\nexport const TweetComponent = (props) => {\r\n    const [newTweets, setNewTweets] = useState([])\r\n    const canTweet = props.canTweet === \"false\" ? false : true\r\n    const handleNewTweet = (newTweet) => {\r\n        let tempNewTweet = [...newTweets]\r\n        tempNewTweet.unshift(newTweet)\r\n        setNewTweets(tempNewTweet)\r\n    }\r\n    return (<div>\r\n        {canTweet === true && <TweetCreate didTweet={handleNewTweet} className='mx-2 my-4' />}\r\n        <TweetFeed newTweets={newTweets} {...props} />\r\n        {/* <TweetList newTweets={newTweets} {...props} /> */}\r\n    </div>)\r\n}\r\n\r\nexport const TweetDetailComponent = (props) => {\r\n    const { tweetid } = props\r\n    const [didLookUp, setDidLookUp] = useState(false)\r\n    const [tweet, setTweet] = useState(null)\r\n\r\n    const handleBackendLoopUp = (response, status) => {\r\n        if (status === 200)\r\n            setTweet(response)\r\n        else\r\n            alert(\"There was an error finding your tweet\")\r\n    }\r\n    useEffect(() => {\r\n        console.log(\"use effect called\");\r\n        if (didLookUp === false) {\r\n            apiTweetDetail(tweetid, handleBackendLoopUp)\r\n            setDidLookUp(true)\r\n        }\r\n    }, [tweetid, didLookUp, setDidLookUp])\r\n\r\n    return tweet === null ? null : <Tweet tweet={tweet} />\r\n\r\n}\r\n\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './index.css'\n\n//import App from './App';\n// import * as serviceWorker from './serviceWorker';\n\nimport { TweetComponent } from './tweets/components'\nimport { TweetDetailComponent } from './tweets'\nimport { ProfileBadgeComponent } from './profiles'\nconst element = document.getElementById(\"tweetme-2\")\n\nconst e = React.createElement\n\n// for tweetList\nif (element) {\n  const myComponent = e(TweetComponent, element.dataset)\n\n  //ReactDOM.render(<TweetCreationForm />, element)\n  ReactDOM.render(myComponent, element)\n}\n\n//for feed\nconst elementFeed = document.getElementById(\"tweetme-feed\")\nif (elementFeed) {\n  const myComponent = e(TweetComponent)\n  //ReactDOM.render(<TweetCreationForm />, element)\n  ReactDOM.render(myComponent, elementFeed)\n}\n\n// //for profile \n// const elementProfile = document.getElementById(\"tweetme-profile-badge-feed\")\n// if (elementProfile) {\n//   const myComponent = e(ProfileBadgeComponent)\n//   ReactDOM.render(myComponent, elementProfile)\n// }\n\n//for profile\nconst elementProfileElements = document.querySelectorAll(\".tweetme-profile-badge\")\nelementProfileElements.forEach(container => {\n  ReactDOM.render(\n    e(ProfileBadgeComponent, container.dataset),\n    container)\n});\n\n\n//for detail\nconst tweetDetailElements = document.querySelectorAll(\".tweetme-detail\")\ntweetDetailElements.forEach(container => {\n  ReactDOM.render(\n    e(TweetDetailComponent, container.dataset),\n    container)\n});\n\n\n\n\n\n\n\n\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n"],"sourceRoot":""}